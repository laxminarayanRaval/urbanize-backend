# Generated by Django 4.0.4 on 2022-07-19 11:54

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('user', 'User'), ('prof', 'Professional'), ('admin', 'Admin')], default='user', max_length=25, verbose_name='User Role')),
                ('full_name', models.CharField(max_length=30, verbose_name='Full Name')),
                ('date_of_birth', models.DateTimeField(null=True, verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Others')], default='male', max_length=25)),
                ('profile_pic_url', models.URLField(null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('mobile_no', models.CharField(max_length=20, null=True, verbose_name='User Contact No.')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date account created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='date account updated')),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContactUsQuery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255, verbose_name='Email Address')),
                ('mobile', models.CharField(max_length=255, verbose_name='Phone Number')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('desc', models.CharField(max_length=255, verbose_name='Dec. Message')),
                ('is_active', models.BooleanField(default=True)),
                ('is_solved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='date query made')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date update made')),
            ],
        ),
        migrations.CreateModel(
            name='ProfessionalUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cities', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), default=list, size=None)),
                ('startsTime', models.TimeField(verbose_name='Availability Start Time')),
                ('endsTime', models.TimeField(verbose_name='Availability End Time')),
                ('address', models.CharField(max_length=255, null=True, verbose_name='Office Address')),
                ('is_active', models.BooleanField(default=True)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProfessionalUserService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subservice_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255, null=True), size=None)),
                ('description', models.TextField(null=True)),
                ('proof_img_url', models.URLField(verbose_name='Proof Image')),
                ('charges', models.FloatField(null=True, verbose_name='Cost for Service')),
                ('estimate_time', models.CharField(max_length=255, null=True, verbose_name='Time to Complete')),
                ('payment_modes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(default='cash', max_length=30), size=None)),
                ('is_active', models.BooleanField(default=True)),
                ('prof_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.professionaluser')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('service_name', models.CharField(max_length=50, unique=True, verbose_name='Service Category')),
                ('description', models.CharField(max_length=255, null=True, verbose_name='Service Category Description')),
                ('img_url', models.URLField(null=True, verbose_name='Service Img URL')),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('service_name', models.CharField(max_length=30, unique=True, verbose_name='Sub-Service Category')),
                ('description', models.CharField(max_length=255, null=True, verbose_name='Sub-Service Category Description')),
                ('img_url', models.URLField(null=True, verbose_name='Service Img URL')),
                ('is_active', models.BooleanField(default=True)),
                ('service_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.service')),
            ],
        ),
        migrations.CreateModel(
            name='UserRequirement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('descriptive_msg', models.TextField()),
                ('interested_prof', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), default=list, size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date query made')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date update made')),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('subservice_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.subservice')),
            ],
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_counts', models.FloatField(verbose_name='Start Ratings')),
                ('description', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('prof_serv_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.professionaluserservice')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProfessionalUserServiceImages',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('img_urls', models.URLField(verbose_name='Uploaded Images URL')),
                ('prof_serv_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.professionaluserservice')),
            ],
        ),
        migrations.AddField(
            model_name='professionaluserservice',
            name='service_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.service'),
        ),
        migrations.CreateModel(
            name='HireProfessionalRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('hire_date', models.DateField(blank=True, null=True)),
                ('descriptive_msg', models.TextField(null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('cancelled', 'Cancelled'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='pending', max_length=25)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date query made')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date update made')),
                ('prof_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.professionaluserservice')),
                ('subservice_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.subservice')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FlaggedProfessionalUserReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date query made')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date update made')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('prof_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.professionaluser')),
            ],
        ),
        migrations.CreateModel(
            name='FavouriteUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date query made')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date update made')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('prof_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.professionaluser')),
            ],
        ),
    ]
